import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

const Index = () => {
  const { toast } = useToast();
  
  // State management
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [claimCount, setClaimCount] = useState(0);
  const [timeLeft, setTimeLeft] = useState(0);
  const [totalRobux, setTotalRobux] = useState(0);
  const [mainProgress, setMainProgress] = useState(2847);
  const [clickProgress, setClickProgress] = useState(0);
  const [showWinModal, setShowWinModal] = useState(false);
  const [lastWin, setLastWin] = useState({ amount: 0, type: 'robux' });
  const [dailyBonus, setDailyBonus] = useState(false);
  const [referralCode, setReferralCode] = useState('RBLX' + Math.random().toString(36).substr(2, 6).toUpperCase());

  // Fake players data (35 players as requested)
  const [players, setPlayers] = useState([
    { name: 'RobloxGamer2024', avatar: 'üéÆ', robux: 50, time: '—Å–µ–π—á–∞—Å' },
    { name: 'ProBuilder777', avatar: 'üèóÔ∏è', robux: 100, time: '2 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'NoobSlayer99', avatar: '‚öîÔ∏è', robux: 75, time: '5 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'BlockMaster', avatar: 'üß±', robux: 25, time: '8 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'MegaBuilder2k', avatar: 'üöÄ', robux: 150, time: '12 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'CoolDude123', avatar: 'üòé', robux: 80, time: '15 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'RobuxHunter', avatar: 'üéØ', robux: 65, time: '18 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'BlockChamp', avatar: 'üèÜ', robux: 95, time: '21 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'GamerPro2024', avatar: '‚≠ê', robux: 110, time: '24 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'RobloxKing', avatar: 'üëë', robux: 130, time: '27 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'BuilderBoss', avatar: 'üî®', robux: 45, time: '30 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'SpeedRunner', avatar: '‚ö°', robux: 85, time: '33 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'CraftMaster', avatar: 'üõ†Ô∏è', robux: 70, time: '36 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'RobuxLord', avatar: 'üíé', robux: 120, time: '39 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'GameWiz', avatar: 'üßô', robux: 55, time: '42 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'BlockNinja', avatar: 'ü•∑', robux: 90, time: '45 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'ProGamer99', avatar: 'üé≤', robux: 105, time: '48 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'RobloxStar', avatar: 'üåü', robux: 35, time: '51 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'BuildKing', avatar: 'üè∞', robux: 115, time: '54 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'GameMaster', avatar: 'üéñÔ∏è', robux: 60, time: '57 —Å–µ–∫ –Ω–∞–∑–∞–¥' },
    { name: 'RobuxHero', avatar: 'ü¶∏', robux: 125, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'BlockExpert', avatar: 'üî•', robux: 40, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'ProBuilder', avatar: 'üèóÔ∏è', robux: 95, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'RobloxFan', avatar: '‚ù§Ô∏è', robux: 75, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'GameChamp', avatar: 'üèÖ', robux: 135, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'BlockWizard', avatar: 'ü™Ñ', robux: 50, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'RobuxSeeker', avatar: 'üîç', robux: 80, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'BuilderPro', avatar: '‚öíÔ∏è', robux: 100, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'GameGuru', avatar: 'üß†', robux: 65, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'RobloxAce', avatar: 'üÉè', robux: 110, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'BlockSage', avatar: 'üë¥', robux: 85, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'ProGamer', avatar: 'üéÆ', robux: 70, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'RobuxMiner', avatar: '‚õèÔ∏è', robux: 90, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'BuildGenius', avatar: 'ü§ì', robux: 55, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' },
    { name: 'GameLegend', avatar: 'üåü', robux: 140, time: '1 –º–∏–Ω –Ω–∞–∑–∞–¥' }
  ]);

  // Leaderboard data
  const [leaderboard] = useState([
    { rank: 1, name: 'RobuxKing2024', avatar: 'üëë', robux: 15420 },
    { rank: 2, name: 'BlockMaster99', avatar: 'üéØ', robux: 12350 },
    { rank: 3, name: 'ProGamer777', avatar: 'üéÆ', robux: 9870 },
    { rank: 4, name: 'BuilderPro', avatar: 'üèóÔ∏è', robux: 8560 },
    { rank: 5, name: 'RobloxLord', avatar: '‚ö°', robux: 7230 }
  ]);

  // Analytics data
  const [analytics] = useState({
    visitors: 142847,
    robuxClaimed: 8942356,
    activeUsers: 3247
  });

  // Timer effect
  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [timeLeft]);

  // Auto-update players
  useEffect(() => {
    const interval = setInterval(() => {
      setPlayers(prev => {
        const newPlayers = [...prev];
        const randomIndex = Math.floor(Math.random() * newPlayers.length);
        newPlayers[randomIndex] = {
          ...newPlayers[randomIndex],
          robux: Math.floor(Math.random() * 200) + 25,
          time: '—Å–µ–π—á–∞—Å'
        };
        return newPlayers.map((player, index) => 
          index === randomIndex ? player : { ...player, time: updateTime(player.time) }
        );
      });
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const updateTime = (currentTime: string) => {
    if (currentTime === '—Å–µ–π—á–∞—Å') return '3 —Å–µ–∫ –Ω–∞–∑–∞–¥';
    if (currentTime === '3 —Å–µ–∫ –Ω–∞–∑–∞–¥') return '6 —Å–µ–∫ –Ω–∞–∑–∞–¥';
    if (currentTime === '6 —Å–µ–∫ –Ω–∞–∑–∞–¥') return '9 —Å–µ–∫ –Ω–∞–∑–∞–¥';
    return currentTime;
  };

  const handleSubscribe = () => {
    window.open('https://www.youtube.com/@madnessgames_?sub_confirmation=1', '_blank');
    setIsSubscribed(true);
    toast({
      title: "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ",
      description: "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å Robux!",
    });
  };

  const handleClaim = () => {
    if (!isSubscribed || timeLeft > 0) return;

    const newClaimCount = claimCount + 1;
    setClaimCount(newClaimCount);
    setClickProgress(Math.min(clickProgress + 1, 1000));

    let winAmount = 0;
    let winType = 'robux';
    
    // Random win logic
    const random = Math.random();
    if (random < 0.01) { // 1% chance for 1000 Robux
      winAmount = 1000;
      winType = 'mega';
    } else if (random < 0.05) { // 4% chance for promo code
      winType = 'promo';
      winAmount = 0;
    } else { // 95% chance for 25-100 Robux
      winAmount = Math.floor(Math.random() * 76) + 25;
    }

    if (winType !== 'promo') {
      setTotalRobux(totalRobux + winAmount);
    }

    setLastWin({ amount: winAmount, type: winType });
    setShowWinModal(true);

    // Set cooldown after 3 claims
    if (newClaimCount % 3 === 0) {
      setTimeLeft(25);
    }

    toast({
      title: winType === 'promo' ? "–ü—Ä–æ–º–æ-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω! üéüÔ∏è" : `+${winAmount} Robux! üíé`,
      description: winType === 'promo' ? "RBLX2024FREE" : `–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: ${totalRobux + winAmount} Robux`,
    });
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const canClaimMainReward = mainProgress >= 10000;
  const canClaimClickReward = clickProgress >= 1000;

  return (
    <div className="min-h-screen bg-background text-foreground p-4">
      <div className="max-w-6xl mx-auto space-y-6">
        
        {/* Analytics Header */}
        <Card className="stats-card">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-robux-green">{analytics.visitors.toLocaleString()}</div>
              <div className="text-sm text-muted-foreground">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-robux-gold">{analytics.robuxClaimed.toLocaleString()}</div>
              <div className="text-sm text-muted-foreground">Robux —Ä–æ–∑–¥–∞–Ω–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-robux-blue">{analytics.activeUsers.toLocaleString()}</div>
              <div className="text-sm text-muted-foreground">–û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å</div>
            </div>
          </div>
        </Card>

        {/* Main Progress Bar */}
        <Card className="p-6">
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-bold">–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h2>
              <span className="text-robux-green font-bold">{mainProgress}/10000</span>
            </div>
            <Progress value={(mainProgress / 10000) * 100} className="h-4" />
            <Button 
              className={`w-full ${canClaimMainReward ? 'bg-robux-green hover:bg-robux-green/80' : ''}`}
              disabled={!canClaimMainReward}
              onClick={() => window.open('https://www.youtube.com/@madnessgames_?sub_confirmation=1', '_blank')}
            >
              –ó–∞–±—Ä–∞—Ç—å Robux! {canClaimMainReward ? '‚úÖ' : 'üîí'}
            </Button>
          </div>
        </Card>

        {/* Click Progress Bar */}
        <Card className="p-6">
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-bold">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–ª–∏–∫–æ–≤</h2>
              <span className="text-robux-purple font-bold">{clickProgress}/1000</span>
            </div>
            <Progress value={(clickProgress / 1000) * 100} className="h-4" />
            <Button 
              className={`w-full ${canClaimClickReward ? 'bg-robux-purple hover:bg-robux-purple/80' : ''}`}
              disabled={!canClaimClickReward}
              onClick={() => window.open('https://t.me/zarabotay_depin', '_blank')}
            >
              –ü–æ–ª—É—á–∏—Ç—å 10000 R {canClaimClickReward ? '‚úÖ' : 'üîí'}
            </Button>
          </div>
        </Card>

        {/* Main Claim Section */}
        <Card className="p-8 text-center">
          <div className="space-y-6">
            <div className="space-y-2">
              <h1 className="text-4xl font-bold robux-glow">ROBUX FAUCET</h1>
              <p className="text-robux-gold font-bold text-xl">–°–æ–±—Ä–∞–Ω–æ: {totalRobux} Robux</p>
              <Progress value={(totalRobux / 10000) * 100} className="h-3" />
              <p className="text-sm text-muted-foreground">–î–æ 10000 Robux: {10000 - totalRobux}</p>
            </div>

            {!isSubscribed && (
              <Button 
                onClick={handleSubscribe}
                className="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-8 rounded-xl text-lg"
              >
                üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
              </Button>
            )}

            <Button 
              onClick={handleClaim}
              disabled={!isSubscribed || timeLeft > 0}
              className="claim-button text-2xl py-6 px-12"
            >
              {timeLeft > 0 ? `–ñ–î–ò–¢–ï ${formatTime(timeLeft)}` : 'CLAIM ROBUX! üíé'}
            </Button>

            {timeLeft > 0 && (
              <div className="text-center">
                <div className="text-3xl font-bold text-robux-blue">{formatTime(timeLeft)}</div>
                <div className="text-sm text-muted-foreground">–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è</div>
              </div>
            )}

            <div className="space-y-4">
              <Button 
                onClick={() => window.open('https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/d/Dpi6-vXUvyqWrw', '_blank')}
                className="bg-robux-purple hover:bg-robux-purple/80 text-white font-bold py-3 px-6 rounded-xl"
              >
                üì± –°–∫–∞—á–∞—Ç—å –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
              </Button>
              <p className="text-sm text-muted-foreground">
                –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
              </p>
            </div>
          </div>
        </Card>

        {/* Two Column Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          
          {/* Recent Activity - All 35 Players */}
          <Card className="p-6">
            <h3 className="text-xl font-bold mb-4">üî• –ù–µ–¥–∞–≤–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏ (–û–Ω–ª–∞–π–Ω: {players.length})</h3>
            <div className="max-h-80 overflow-y-auto space-y-2">
              {players.map((player, index) => (
                <div key={index} className="player-card flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{player.avatar}</span>
                    <div>
                      <div className="font-semibold text-sm">{player.name}</div>
                      <div className="text-xs text-muted-foreground">{player.time}</div>
                    </div>
                  </div>
                  <Badge className="bg-robux-gold text-black text-xs">+{player.robux} R$</Badge>
                </div>
              ))}
            </div>
          </Card>

          {/* Leaderboard */}
          <Card className="p-6">
            <h3 className="text-xl font-bold mb-4">üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</h3>
            <div className="space-y-3">
              {leaderboard.map((player) => (
                <div key={player.rank} className="player-card flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 rounded-full bg-robux-blue flex items-center justify-center text-white font-bold">
                      {player.rank}
                    </div>
                    <span className="text-xl">{player.avatar}</span>
                    <div>
                      <div className="font-semibold">{player.name}</div>
                    </div>
                  </div>
                  <Badge className="bg-robux-gold text-black">{player.robux.toLocaleString()} R$</Badge>
                </div>
              ))}
            </div>
          </Card>
        </div>

        {/* Bonus Section */}
        <Card className="p-6">
          <Tabs defaultValue="daily" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="daily">üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</TabsTrigger>
              <TabsTrigger value="referral">üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</TabsTrigger>
            </TabsList>
            <TabsContent value="daily" className="space-y-4">
              <div className="text-center space-y-4">
                <h3 className="text-xl font-bold">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</h3>
                <p className="text-muted-foreground">–ó–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!</p>
                <Button 
                  onClick={() => {
                    setDailyBonus(true);
                    setTotalRobux(prev => prev + 50);
                    toast({ title: "–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω! +50 Robux üéÅ" });
                  }}
                  disabled={dailyBonus}
                  className="bg-robux-green hover:bg-robux-green/80"
                >
                  {dailyBonus ? '–ü–æ–ª—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ‚úÖ' : '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å +50 R$'}
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="referral" className="space-y-4">
              <div className="text-center space-y-4">
                <h3 className="text-xl font-bold">–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</h3>
                <p className="text-muted-foreground">–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏ 100 Robux!</p>
                <div className="bg-secondary p-4 rounded-lg">
                  <p className="text-sm mb-2">–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</p>
                  <div className="bg-background p-2 rounded border font-mono text-robux-blue">
                    {referralCode}
                  </div>
                </div>
                <Button className="bg-robux-blue hover:bg-robux-blue/80">
                  –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </Card>
      </div>

      {/* Win Modal */}
      <Dialog open={showWinModal} onOpenChange={setShowWinModal}>
        <DialogContent className="text-center">
          <DialogHeader>
            <DialogTitle className="text-2xl">
              {lastWin.type === 'mega' ? 'üéâ –ú–ï–ì–ê –í–´–ò–ì–†–´–®! üéâ' : 
               lastWin.type === 'promo' ? 'üéüÔ∏è –ü–†–û–ú–û-–ö–û–î! üéüÔ∏è' : 'üíé –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üíé'}
            </DialogTitle>
          </DialogHeader>
          <div className="py-6">
            <div className="text-6xl coin-animation mb-4">
              {lastWin.type === 'mega' ? 'üí∞' : lastWin.type === 'promo' ? 'üéüÔ∏è' : 'üíé'}
            </div>
            <div className="text-4xl font-bold robux-glow mb-2">
              {lastWin.type === 'promo' ? 'RBLX2024FREE' : `+${lastWin.amount} Robux`}
            </div>
            <p className="text-muted-foreground">
              {lastWin.type === 'mega' ? '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —É–¥–∞—á–∞!' : 
               lastWin.type === 'promo' ? '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥ –≤ Roblox' : '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'}
            </p>
          </div>
          <Button onClick={() => setShowWinModal(false)} className="w-full">
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </Button>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;